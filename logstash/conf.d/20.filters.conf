# vim: syntax=conf tabstop=4 shiftwidth=4 expandtab

filter {
    if "asterisk_cdr_input" in [tags] {
        if "asterisk_cdr" in [tags] {
            mutate {
                copy => { "[beat][name]" => "capture_endpoint" }
            }
            csv {
                autogenerate_column_names => false
                separator => ","
                columns => ["sip_call_id", "linked_id", "unique_id", "sequence", "caller_id_number", "caller_id", "destination_extension", "destination_context", "disposition", "hangup_cause", "start_time", "answer_time", "end_time", "duration", "billsec", "last_application", "last_application_data", "channel", "destination_channel", "packet_sent", "packet_received", "local_rx_packet_loss", "local_tx_packet_loss", "local_rx_jitter", "local_tx_jitter", "local_jitter_max", "local_jitter_min", "local_jitter_normal_deviation", "local_jitter_standard_deviation", "rtt", "minrtt", "maxrtt", "account_code"]
            }
            # override @timestamp
            date {
                match => ["start_time", "yyyy-MM-dd HH:mm:ss"]
                timezone => "%{[beat][timezone]}"
            }
            # fix empty or infinite fields
            if [duration] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('duration', nil)"
                }
            }
            if [billsec] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('billsec', nil)"
                }
            }
            if [packet_sent] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('packet_sent', nil)"
                }
            }
            if [packet_received] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('packet_received', nil)"
                }
            }
            if [local_rx_packet_loss] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_rx_packet_loss', nil)"
                }
            }
            if [local_tx_packet_loss] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_tx_packet_loss', nil)"
                }
            }
            if [local_rx_jitter] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_rx_jitter', nil)"
                }
            }
            if [local_tx_jitter] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_tx_jitter', nil)"
                }
            }
            if [local_jitter_max] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_jitter_max', nil)"
                }
            }
            if [local_jitter_min] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_jitter_min', nil)"
                }
            }
            if [local_jitter_normal_deviation] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_jitter_normal_deviation', nil)"
                }
            }
            if [local_jitter_standard_deviation] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('local_jitter_standard_deviation', nil)"
                }
            }
            if [rtt] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('rtt', nil)"
                }
            }
            if [minrtt] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('minrtt', nil)"
                }
            }
            if [maxrtt] !~ /^[0-9\.]*$/ {
                ruby {
                    code => "event.set('maxrtt', nil)"
                }
            }
            # cast integer and float fields
            mutate {
                convert => {
                    "duration" => "integer"
                    "billsec" => "integer"
                    "packet_sent" => "integer"
                    "packet_received" => "integer"
                    "local_rx_packet_loss" => "integer"
                    "local_tx_packet_loss" => "integer"
                    "local_rx_jitter" => "float"
                    "local_tx_jitter" => "float"
                    "local_jitter_max" => "float"
                    "local_jitter_min" => "float"
                    "local_jitter_normal_deviation" => "float"
                    "local_jitter_standard_deviation" => "float"
                    "rtt" => "float"
                    "minrtt" => "float"
                    "maxrtt" => "float"
                }
            }
            # remove weird local_jitter_standard_deviation values
            ruby {
                code => "event.set('local_jitter_standard_deviation', nil) if ! event.get('local_jitter_standard_deviation').nil? && (event.get('local_jitter_standard_deviation') > 3600000 || event.get('local_jitter_standard_deviation') < 0)"
            }
            # cast date fields
            date {
                match => ["start_time", "yyyy-MM-dd HH:mm:ss"]
                timezone => "%{[beat][timezone]}"
                target => "start_time"
            }
            if [answer_time] != "" {
                date {
                    match => ["answer_time", "yyyy-MM-dd HH:mm:ss"]
                    timezone => "%{[beat][timezone]}"
                    target => "answer_time"
                }
            } else {
                ruby {
                    code => "event.set('answer_time', nil)"
                }
            }
            date {
                match => ["end_time", "yyyy-MM-dd HH:mm:ss"]
                timezone => "%{[beat][timezone]}"
                target => "end_time"
            }
            mutate {
                add_tag => ["valid_asterisk_cdr"]
            }
        }
    }
    if "captagent_input_sip_json" in [tags] {
        dns {
            reverse => [ "host" ]
            action => "replace"
            hit_cache_size => 128
        }
        mutate {
            rename => { "host" => "capture_endpoint" }
        }
        mutate {
            copy => { "src_ip4" => "src_host" }
            copy => { "dst_ip4" => "dst_host" }
        }
        dns {
            reverse => ["src_host", "dst_host"]
            action => "replace"
            hit_cache_size => 128
        }
        sip {
            source => "payload"
            include_keys => []
            line_split => "\r\n"
            header_regex => "^[a-zA-Z0-9_\-]+\s*:"
        }
        if "_sipparsefailure" not in [tags] {
            mutate {
                add_tag => ["valid_sip_capture"]
            }
        }
    }
    if "captagent_input_rtcp_json" in [tags] {
        dns {
            reverse => [ "host" ]
            action => "replace"
            hit_cache_size => 128
        }
        mutate {
            rename => { "host" => "capture_endpoint" }
            rename => { "corr_id" => "sip_call_id" }
        }
        json {
            source => "payload"
            target => "rtcp"
        }
        if [rtcp][report_count] and [rtcp][report_count] > 0 and [rtcp][report_blocks] {
            split {
                field => "[rtcp][report_blocks]"
            }
        } else {
            mutate {
                remove_field => "[rtcp][report_blocks]"
            }
        }
        if [rtcp][sdes_report_count] and [rtcp][sdes_report_count] > 0 and [rtcp][sdes_information] {
            split {
                field => "[rtcp][sdes_information]"
            }
        } else {
            mutate {
                remove_field => "[rtcp][sdes_information]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/endianness_switcher.rb"
            script_params => {
                fields => ["[rtcp][sender_information][ntp_timestamp_sec]", "[rtcp][sender_information][ntp_timestamp_usec]", "[rtcp][sender_information][rtp_timestamp]"]
                field_length_in_bytes => 4
            }
        }
        ruby {
            path => "/etc/logstash/scripts/hexify.rb"
            script_params => {
                fields => ["[rtcp][sender_information][ntp_timestamp_sec]", "[rtcp][sender_information][ntp_timestamp_usec]", "[rtcp][report_blocks][lsr]"]
                field_length_in_bytes => 4
            }
        }
        ruby {
            path => "/etc/logstash/scripts/ntp_timestamp_converter.rb"
            script_params => {
                source_sec => "[rtcp][sender_information][ntp_timestamp_sec]"
                source_usec => "[rtcp][sender_information][ntp_timestamp_usec]"
                target => "[rtcp][sender_information][unix_timestamp_ms]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/rtcp_lsr_reference.rb"
            script_params => {
                ntp_timestamp_sec_hex => "[rtcp][sender_information][ntp_timestamp_sec_hex]"
                ntp_timestamp_usec_hex => "[rtcp][sender_information][ntp_timestamp_usec_hex]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/rtcp_dlsr_converter.rb"
            script_params => {
                dlsr => "[rtcp][report_blocks][dlsr]"
                target => "[rtcp][report_blocks][dlsr_us]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/rtcp_rtt.rb"
            script_params => {
                dlsr => "[rtcp][report_blocks][dlsr]"
                lsr_hex => "[rtcp][report_blocks][lsr_hex]"
                reception_unix_ts_s => "tss"
                reception_unix_ts_us => "tsu"
                target => "[rtcp][rtt]"
            }
        }
        if [rtcp][sender_information][unix_timestamp_ms] {
            date {
                match => ["[rtcp][sender_information][unix_timestamp_ms]", "UNIX_MS"]
                timezone => "UTC"
                target => "[rtcp][sender_information][unix_timestamp]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/rtcp_percent_lost.rb"
            script_params => {
                fraction_lost => "[rtcp][report_blocks][fraction_lost]"
                target => "[rtcp][report_blocks][percent_lost]"
            }
        }
        ruby {
            path => "/etc/logstash/scripts/rtcp_mos.rb"
            script_params => {
                timestamp => "[tss]"
                call_id => "[sip_call_id]"
                percent_lost => "[rtcp][report_blocks][percent_lost]"
                rtt => "[rtcp][rtt]"
                target_mos => "[rtcp][mos]"
                target_jitter => "[rtcp][jitter]"
            }
        }
        mutate {
            copy => { "src_ip4" => "src_host" }
            copy => { "dst_ip4" => "dst_host" }
        }
        dns {
            reverse => ["src_host", "dst_host"]
            action => "replace"
            hit_cache_size => 128
        }
        mutate {
            add_tag => ["valid_rtcp_capture"]
            remove_field => "[rtcp][sdes_chunk_ssrc]"
        }
    }
}
